
temp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001358  08001358  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001358  08001358  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001358  08001358  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001358  08001358  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800135c  0800135c  0001135c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000530f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001153  00000000  00000000  00025343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005d0  00000000  00000000  00026498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000528  00000000  00000000  00026a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b973  00000000  00000000  00026f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004d1e  00000000  00000000  00042903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099c3b  00000000  00000000  00047621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e125c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016dc  00000000  00000000  000e12ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001340 	.word	0x08001340

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001340 	.word	0x08001340

080001c8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40023800 	.word	0x40023800

080001f8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	683a      	ldr	r2, [r7, #0]
 8000206:	619a      	str	r2, [r3, #24]
}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr

08000214 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	463b      	mov	r3, r7
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
 8000228:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800022a:	2004      	movs	r0, #4
 800022c:	f7ff ffcc 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000230:	2002      	movs	r0, #2
 8000232:	f7ff ffc9 	bl	80001c8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000236:	2101      	movs	r1, #1
 8000238:	480a      	ldr	r0, [pc, #40]	; (8000264 <MX_GPIO_Init+0x50>)
 800023a:	f7ff ffdd 	bl	80001f8 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800023e:	2301      	movs	r3, #1
 8000240:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000242:	2301      	movs	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000252:	463b      	mov	r3, r7
 8000254:	4619      	mov	r1, r3
 8000256:	4803      	ldr	r0, [pc, #12]	; (8000264 <MX_GPIO_Init+0x50>)
 8000258:	f000 fe52 	bl	8000f00 <LL_GPIO_Init>

}
 800025c:	bf00      	nop
 800025e:	3718      	adds	r7, #24
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40020400 	.word	0x40020400

08000268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	60d3      	str	r3, [r2, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__NVIC_GetPriorityGrouping+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	0a1b      	lsrs	r3, r3, #8
 80002ba:	f003 0307 	and.w	r3, r3, #7
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	; (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	; (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	; 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	2b04      	cmp	r3, #4
 800033c:	bf28      	it	cs
 800033e:	2304      	movcs	r3, #4
 8000340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3304      	adds	r3, #4
 8000346:	2b06      	cmp	r3, #6
 8000348:	d902      	bls.n	8000350 <NVIC_EncodePriority+0x30>
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3b03      	subs	r3, #3
 800034e:	e000      	b.n	8000352 <NVIC_EncodePriority+0x32>
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	401a      	ands	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000368:	f04f 31ff 	mov.w	r1, #4294967295
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	43d9      	mvns	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	; 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <LL_RCC_HSI_Enable+0x1c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a04      	ldr	r2, [pc, #16]	; (80003a4 <LL_RCC_HSI_Enable+0x1c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40023800 	.word	0x40023800

080003a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <LL_RCC_HSI_IsReady+0x20>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f003 0302 	and.w	r3, r3, #2
 80003b4:	2b02      	cmp	r3, #2
 80003b6:	bf0c      	ite	eq
 80003b8:	2301      	moveq	r3, #1
 80003ba:	2300      	movne	r3, #0
 80003bc:	b2db      	uxtb	r3, r3
}
 80003be:	4618      	mov	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40023800 	.word	0x40023800

080003cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	4904      	ldr	r1, [pc, #16]	; (80003f4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003e2:	4313      	orrs	r3, r2
 80003e4:	600b      	str	r3, [r1, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800

080003f8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_RCC_SetSysClkSource+0x24>)
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f023 0203 	bic.w	r2, r3, #3
 8000408:	4904      	ldr	r1, [pc, #16]	; (800041c <LL_RCC_SetSysClkSource+0x24>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	608b      	str	r3, [r1, #8]
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40023800 	.word	0x40023800

08000420 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <LL_RCC_GetSysClkSource+0x18>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	f003 030c 	and.w	r3, r3, #12
}
 800042c:	4618      	mov	r0, r3
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800

0800043c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <LL_RCC_SetAHBPrescaler+0x24>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800044c:	4904      	ldr	r1, [pc, #16]	; (8000460 <LL_RCC_SetAHBPrescaler+0x24>)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4313      	orrs	r3, r2
 8000452:	608b      	str	r3, [r1, #8]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	40023800 	.word	0x40023800

08000464 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800046c:	4b06      	ldr	r3, [pc, #24]	; (8000488 <LL_RCC_SetAPB1Prescaler+0x24>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000474:	4904      	ldr	r1, [pc, #16]	; (8000488 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4313      	orrs	r3, r2
 800047a:	608b      	str	r3, [r1, #8]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr
 8000488:	40023800 	.word	0x40023800

0800048c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800049c:	4904      	ldr	r1, [pc, #16]	; (80004b0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	608b      	str	r3, [r1, #8]
}
 80004a4:	bf00      	nop
 80004a6:	370c      	adds	r7, #12
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40023800 	.word	0x40023800

080004b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c0:	4907      	ldr	r1, [pc, #28]	; (80004e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4313      	orrs	r3, r2
 80004c6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	40023800 	.word	0x40023800

080004e4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004f0:	4907      	ldr	r1, [pc, #28]	; (8000510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4313      	orrs	r3, r2
 80004f6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4013      	ands	r3, r2
 8000500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	bf00      	nop
 8000506:	3714      	adds	r7, #20
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40023800 	.word	0x40023800

08000514 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_FLASH_SetLatency+0x24>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f023 0207 	bic.w	r2, r3, #7
 8000524:	4904      	ldr	r1, [pc, #16]	; (8000538 <LL_FLASH_SetLatency+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	600b      	str	r3, [r1, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40023c00 	.word	0x40023c00

0800053c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <LL_FLASH_GetLatency+0x18>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 0307 	and.w	r3, r3, #7
}
 8000548:	4618      	mov	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	600b      	str	r3, [r1, #0]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40007000 	.word	0x40007000

08000580 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	601a      	str	r2, [r3, #0]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 0301 	and.w	r3, r3, #1
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d101      	bne.n	80005d8 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80005d4:	2301      	movs	r3, #1
 80005d6:	e000      	b.n	80005da <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80005d8:	2300      	movs	r3, #0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 80005e6:	b480      	push	{r7}
 80005e8:	b083      	sub	sp, #12
 80005ea:	af00      	add	r7, sp, #0
 80005ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	2b02      	cmp	r3, #2
 80005f8:	d101      	bne.n	80005fe <LL_SPI_IsActiveFlag_TXE+0x18>
 80005fa:	2301      	movs	r3, #1
 80005fc:	e000      	b.n	8000600 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800061c:	2b80      	cmp	r3, #128	; 0x80
 800061e:	d101      	bne.n	8000624 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000620:	2301      	movs	r3, #1
 8000622:	e000      	b.n	8000626 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000624:	2300      	movs	r3, #0
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	330c      	adds	r3, #12
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
}
 8000642:	4618      	mov	r0, r3
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr

0800064e <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800064e:	b480      	push	{r7}
 8000650:	b085      	sub	sp, #20
 8000652:	af00      	add	r7, sp, #0
 8000654:	6078      	str	r0, [r7, #4]
 8000656:	460b      	mov	r3, r1
 8000658:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	330c      	adds	r3, #12
 800065e:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	78fa      	ldrb	r2, [r7, #3]
 8000664:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_GPIO_SetOutputPin>:
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	619a      	str	r2, [r3, #24]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	041a      	lsls	r2, r3, #16
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	619a      	str	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006b6:	f7ff ff15 	bl	80004e4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006ba:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006be:	f7ff fef9 	bl	80004b4 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c2:	2003      	movs	r0, #3
 80006c4:	f7ff fdd0 	bl	8000268 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006c8:	f7ff fdf2 	bl	80002b0 <__NVIC_GetPriorityGrouping>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2200      	movs	r2, #0
 80006d0:	210f      	movs	r1, #15
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe24 	bl	8000320 <NVIC_EncodePriority>
 80006d8:	4603      	mov	r3, r0
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295
 80006e0:	f7ff fdf4 	bl	80002cc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f830 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f7ff fd94 	bl	8000214 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006ec:	f000 f8fe 	bl	80008ec <MX_SPI2_Init>
  MX_TIM2_Init();
 80006f0:	f000 fa61 	bl	8000bb6 <MX_TIM2_Init>
	//	HAL_Delay(10);
	//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	//	HAL_SPI_Receive(&hspi2, rx_buffer, 2, 1);
	//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

	wait_for_10_ms();
 80006f4:	f000 fab2 	bl	8000c5c <wait_for_10_ms>

	collect_sample_LL(rx_buffer);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f85a 	bl	80007b4 <collect_sample_LL>
	// collect_sample_DRA(rx_buffer);

	int16_t tmp = (rx_buffer[0] << 8) | rx_buffer[1];
 8000700:	793b      	ldrb	r3, [r7, #4]
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	b21a      	sxth	r2, r3
 8000706:	797b      	ldrb	r3, [r7, #5]
 8000708:	b21b      	sxth	r3, r3
 800070a:	4313      	orrs	r3, r2
 800070c:	81fb      	strh	r3, [r7, #14]

	if ((tmp & (1 << 13)) != 0) {
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000714:	2b00      	cmp	r3, #0
 8000716:	d004      	beq.n	8000722 <main+0x76>
		tmp -= 16384;
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800071e:	b29b      	uxth	r3, r3
 8000720:	81fb      	strh	r3, [r7, #14]
	}
	temperature = (float)tmp;
 8000722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072e:	edc7 7a02 	vstr	s15, [r7, #8]
	temperature /= 32.;
 8000732:	ed97 7a02 	vldr	s14, [r7, #8]
 8000736:	eddf 6a03 	vldr	s13, [pc, #12]	; 8000744 <main+0x98>
 800073a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073e:	edc7 7a02 	vstr	s15, [r7, #8]
  {
 8000742:	e7d7      	b.n	80006f4 <main+0x48>
 8000744:	42000000 	.word	0x42000000

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff fee1 	bl	8000514 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000752:	bf00      	nop
 8000754:	f7ff fef2 	bl	800053c <LL_FLASH_GetLatency>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d1fa      	bne.n	8000754 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800075e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000762:	f7ff fef9 	bl	8000558 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000766:	2010      	movs	r0, #16
 8000768:	f7ff fe30 	bl	80003cc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 800076c:	f7ff fe0c 	bl	8000388 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000770:	bf00      	nop
 8000772:	f7ff fe19 	bl	80003a8 <LL_RCC_HSI_IsReady>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d1fa      	bne.n	8000772 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff fe5d 	bl	800043c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000782:	2000      	movs	r0, #0
 8000784:	f7ff fe6e 	bl	8000464 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000788:	2000      	movs	r0, #0
 800078a:	f7ff fe7f 	bl	800048c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800078e:	2000      	movs	r0, #0
 8000790:	f7ff fe32 	bl	80003f8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000794:	bf00      	nop
 8000796:	f7ff fe43 	bl	8000420 <LL_RCC_GetSysClkSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d1fa      	bne.n	8000796 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 80007a0:	4803      	ldr	r0, [pc, #12]	; (80007b0 <SystemClock_Config+0x68>)
 80007a2:	f000 fd83 	bl	80012ac <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 80007a6:	4802      	ldr	r0, [pc, #8]	; (80007b0 <SystemClock_Config+0x68>)
 80007a8:	f000 fd8e 	bl	80012c8 <LL_SetSystemCoreClock>
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	00f42400 	.word	0x00f42400

080007b4 <collect_sample_LL>:
	CLEAR_BIT(SPI2->CR1, SPI_CR1_SPE); // SPI disable
	wait_for_10_us();
	WRITE_REG(GPIOB->BSRR, (LL_GPIO_PIN_0)); // \CS high
}

void collect_sample_LL(uint8_t *rx_buffer) {
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0); // \CS low
 80007bc:	2101      	movs	r1, #1
 80007be:	4827      	ldr	r0, [pc, #156]	; (800085c <collect_sample_LL+0xa8>)
 80007c0:	f7ff ff65 	bl	800068e <LL_GPIO_ResetOutputPin>
	wait_for_10_us();
 80007c4:	f000 fa28 	bl	8000c18 <wait_for_10_us>
	LL_SPI_Enable(SPI2);
 80007c8:	4825      	ldr	r0, [pc, #148]	; (8000860 <collect_sample_LL+0xac>)
 80007ca:	f7ff fed9 	bl	8000580 <LL_SPI_Enable>

	LL_SPI_TransmitData8(SPI2, 0x00); // dummy write
 80007ce:	2100      	movs	r1, #0
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <collect_sample_LL+0xac>)
 80007d2:	f7ff ff3c 	bl	800064e <LL_SPI_TransmitData8>
	while ( !LL_SPI_IsActiveFlag_TXE(SPI2) ); // wait until TXE is set
 80007d6:	bf00      	nop
 80007d8:	4821      	ldr	r0, [pc, #132]	; (8000860 <collect_sample_LL+0xac>)
 80007da:	f7ff ff04 	bl	80005e6 <LL_SPI_IsActiveFlag_TXE>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f9      	beq.n	80007d8 <collect_sample_LL+0x24>
	LL_SPI_TransmitData8(SPI2, 0x00); // dummy write
 80007e4:	2100      	movs	r1, #0
 80007e6:	481e      	ldr	r0, [pc, #120]	; (8000860 <collect_sample_LL+0xac>)
 80007e8:	f7ff ff31 	bl	800064e <LL_SPI_TransmitData8>
	while ( !LL_SPI_IsActiveFlag_RXNE(SPI2) ); // wait until RXNE is set
 80007ec:	bf00      	nop
 80007ee:	481c      	ldr	r0, [pc, #112]	; (8000860 <collect_sample_LL+0xac>)
 80007f0:	f7ff fee6 	bl	80005c0 <LL_SPI_IsActiveFlag_RXNE>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0f9      	beq.n	80007ee <collect_sample_LL+0x3a>
	rx_buffer[0] = LL_SPI_ReceiveData8(SPI2); // read DR (clears RXNE)
 80007fa:	4819      	ldr	r0, [pc, #100]	; (8000860 <collect_sample_LL+0xac>)
 80007fc:	f7ff ff19 	bl	8000632 <LL_SPI_ReceiveData8>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	701a      	strb	r2, [r3, #0]

	while ( !LL_SPI_IsActiveFlag_RXNE(SPI2) ); // wait until RXNE is set
 8000808:	bf00      	nop
 800080a:	4815      	ldr	r0, [pc, #84]	; (8000860 <collect_sample_LL+0xac>)
 800080c:	f7ff fed8 	bl	80005c0 <LL_SPI_IsActiveFlag_RXNE>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f9      	beq.n	800080a <collect_sample_LL+0x56>
	rx_buffer[1] = LL_SPI_ReceiveData8(SPI2); // read DR (clears RXNE)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c5c      	adds	r4, r3, #1
 800081a:	4811      	ldr	r0, [pc, #68]	; (8000860 <collect_sample_LL+0xac>)
 800081c:	f7ff ff09 	bl	8000632 <LL_SPI_ReceiveData8>
 8000820:	4603      	mov	r3, r0
 8000822:	7023      	strb	r3, [r4, #0]

	while ( !LL_SPI_IsActiveFlag_TXE(SPI2) ); // wait until TXE is set
 8000824:	bf00      	nop
 8000826:	480e      	ldr	r0, [pc, #56]	; (8000860 <collect_sample_LL+0xac>)
 8000828:	f7ff fedd 	bl	80005e6 <LL_SPI_IsActiveFlag_TXE>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d0f9      	beq.n	8000826 <collect_sample_LL+0x72>
	while ( LL_SPI_IsActiveFlag_BSY(SPI2) ); // wait until BSY is reset
 8000832:	bf00      	nop
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <collect_sample_LL+0xac>)
 8000836:	f7ff fee9 	bl	800060c <LL_SPI_IsActiveFlag_BSY>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d1f9      	bne.n	8000834 <collect_sample_LL+0x80>

	LL_SPI_Disable(SPI2); // SPI disable
 8000840:	4807      	ldr	r0, [pc, #28]	; (8000860 <collect_sample_LL+0xac>)
 8000842:	f7ff fead 	bl	80005a0 <LL_SPI_Disable>
	wait_for_10_us();
 8000846:	f000 f9e7 	bl	8000c18 <wait_for_10_us>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_0); // \CS high
 800084a:	2101      	movs	r1, #1
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <collect_sample_LL+0xa8>)
 800084e:	f7ff ff10 	bl	8000672 <LL_GPIO_SetOutputPin>
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	bf00      	nop
 800085c:	40020400 	.word	0x40020400
 8000860:	40003800 	.word	0x40003800

08000864 <LL_AHB1_GRP1_EnableClock>:
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	4907      	ldr	r1, [pc, #28]	; (8000890 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800087a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4013      	ands	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40023800 	.word	0x40023800

08000894 <LL_APB1_GRP1_EnableClock>:
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4013      	ands	r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b2:	68fb      	ldr	r3, [r7, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800

080008c4 <LL_SPI_SetStandard>:
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f023 0210 	bic.w	r2, r3, #16
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	431a      	orrs	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	605a      	str	r2, [r3, #4]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
	...

080008ec <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	; 0x40
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	2228      	movs	r2, #40	; 0x28
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fd18 	bl	8001330 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
 800090e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000910:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000914:	f7ff ffbe 	bl	8000894 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000918:	2004      	movs	r0, #4
 800091a:	f7ff ffa3 	bl	8000864 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800091e:	2002      	movs	r0, #2
 8000920:	f7ff ffa0 	bl	8000864 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000924:	230c      	movs	r3, #12
 8000926:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000928:	2302      	movs	r3, #2
 800092a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000938:	2305      	movs	r3, #5
 800093a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_SPI2_Init+0xc8>)
 8000942:	f000 fadd 	bl	8000f00 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800094c:	2302      	movs	r3, #2
 800094e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000958:	2300      	movs	r3, #0
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800095c:	2305      	movs	r3, #5
 800095e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <MX_SPI2_Init+0xcc>)
 8000966:	f000 facb 	bl	8000f00 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800096e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000972:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000978:	2302      	movs	r3, #2
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000986:	2318      	movs	r3, #24
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000992:	230a      	movs	r3, #10
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	4619      	mov	r1, r3
 800099c:	4807      	ldr	r0, [pc, #28]	; (80009bc <MX_SPI2_Init+0xd0>)
 800099e:	f000 fb45 	bl	800102c <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80009a2:	2100      	movs	r1, #0
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_SPI2_Init+0xd0>)
 80009a6:	f7ff ff8d 	bl	80008c4 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	3740      	adds	r7, #64	; 0x40
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020800 	.word	0x40020800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40003800 	.word	0x40003800

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <LL_APB1_GRP1_EnableClock>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4013      	ands	r3, r2
 8000a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	40023800 	.word	0x40023800

08000a6c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	601a      	str	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	683a      	ldr	r2, [r7, #0]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000af6:	f023 0307 	bic.w	r3, r3, #7
 8000afa:	683a      	ldr	r2, [r7, #0]
 8000afc:	431a      	orrs	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	609a      	str	r2, [r3, #8]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	605a      	str	r2, [r3, #4]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	609a      	str	r2, [r3, #8]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f06f 0201 	mvn.w	r2, #1
 8000b62:	611a      	str	r2, [r3, #16]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d101      	bne.n	8000b88 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	615a      	str	r2, [r3, #20]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ff36 	bl	8000a3c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 16;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000be8:	f000 faac 	bl	8001144 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000bec:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf0:	f7ff ff4c 	bl	8000a8c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bfa:	f7ff ff73 	bl	8000ae4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000bfe:	2100      	movs	r1, #0
 8000c00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c04:	f7ff ff83 	bl	8000b0e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c0c:	f7ff ff92 	bl	8000b34 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3718      	adds	r7, #24
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <wait_for_10_us>:

/* USER CODE BEGIN 1 */
void wait_for_10_us() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	// 16 MHz APB1 clock before timer prescaler
	LL_TIM_SetPrescaler(TIM2, 16); // 1 MHz after prescaler
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c22:	f7ff ff43 	bl	8000aac <LL_TIM_SetPrescaler>
	LL_TIM_SetAutoReload(TIM2, 10); // set auto-reload value
 8000c26:	210a      	movs	r1, #10
 8000c28:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c2c:	f7ff ff4c 	bl	8000ac8 <LL_TIM_SetAutoReload>
	LL_TIM_GenerateEvent_UPDATE(TIM2); // generate update event
 8000c30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c34:	f7ff ffaf 	bl	8000b96 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_EnableCounter(TIM2); // enable counter
 8000c38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c3c:	f7ff ff16 	bl	8000a6c <LL_TIM_EnableCounter>
	while ( !LL_TIM_IsActiveFlag_UPDATE(TIM2) ); // wait for update flag
 8000c40:	bf00      	nop
 8000c42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c46:	f7ff ff93 	bl	8000b70 <LL_TIM_IsActiveFlag_UPDATE>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f8      	beq.n	8000c42 <wait_for_10_us+0x2a>
	LL_TIM_ClearFlag_UPDATE(TIM2); // clear update flag
 8000c50:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c54:	f7ff ff7e 	bl	8000b54 <LL_TIM_ClearFlag_UPDATE>
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <wait_for_10_ms>:

void wait_for_10_ms() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	// 16 MHz APB1 clock before timer prescaler
	LL_TIM_SetPrescaler(TIM2, 16); // 1 MHz after prescaler
 8000c60:	2110      	movs	r1, #16
 8000c62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c66:	f7ff ff21 	bl	8000aac <LL_TIM_SetPrescaler>
	LL_TIM_SetAutoReload(TIM2, 10000); // set auto-reload value
 8000c6a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c72:	f7ff ff29 	bl	8000ac8 <LL_TIM_SetAutoReload>
	LL_TIM_GenerateEvent_UPDATE(TIM2); // generate update event
 8000c76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c7a:	f7ff ff8c 	bl	8000b96 <LL_TIM_GenerateEvent_UPDATE>
	LL_TIM_EnableCounter(TIM2); // enable counter
 8000c7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c82:	f7ff fef3 	bl	8000a6c <LL_TIM_EnableCounter>
	while ( !LL_TIM_IsActiveFlag_UPDATE(TIM2) ); // wait for update flag
 8000c86:	bf00      	nop
 8000c88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c8c:	f7ff ff70 	bl	8000b70 <LL_TIM_IsActiveFlag_UPDATE>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f8      	beq.n	8000c88 <wait_for_10_ms+0x2c>
	LL_TIM_ClearFlag_UPDATE(TIM2); // clear update flag
 8000c96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c9a:	f7ff ff5b 	bl	8000b54 <LL_TIM_ClearFlag_UPDATE>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff fea3 	bl	8000a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f000 fb09 	bl	80012e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fce9 	bl	80006ac <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000ce8:	08001360 	.word	0x08001360
  ldr r2, =_sbss
 8000cec:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000cf0:	20000020 	.word	0x20000020

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>

08000cf6 <LL_GPIO_SetPinMode>:
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b089      	sub	sp, #36	; 0x24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa93 f3a3 	rbit	r3, r3
 8000d10:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	fab3 f383 	clz	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	401a      	ands	r2, r3
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa93 f3a3 	rbit	r3, r3
 8000d30:	61bb      	str	r3, [r7, #24]
  return result;
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	fab3 f383 	clz	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	431a      	orrs	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	3724      	adds	r7, #36	; 0x24
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <LL_GPIO_SetPinOutputType>:
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	685a      	ldr	r2, [r3, #4]
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	fb01 f303 	mul.w	r3, r1, r3
 8000d72:	431a      	orrs	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	605a      	str	r2, [r3, #4]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_GPIO_SetPinSpeed>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	613b      	str	r3, [r7, #16]
  return result;
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	2103      	movs	r1, #3
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	401a      	ands	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	61bb      	str	r3, [r7, #24]
  return result;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	609a      	str	r2, [r3, #8]
}
 8000dd6:	bf00      	nop
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_GPIO_SetPinPull>:
{
 8000de2:	b480      	push	{r7}
 8000de4:	b089      	sub	sp, #36	; 0x24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa93 f3a3 	rbit	r3, r3
 8000dfc:	613b      	str	r3, [r7, #16]
  return result;
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	fab3 f383 	clz	r3, r3
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2103      	movs	r1, #3
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	401a      	ands	r2, r3
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa93 f3a3 	rbit	r3, r3
 8000e1c:	61bb      	str	r3, [r7, #24]
  return result;
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	60da      	str	r2, [r3, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3724      	adds	r7, #36	; 0x24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_GPIO_SetAFPin_0_7>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6a1a      	ldr	r2, [r3, #32]
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa93 f3a3 	rbit	r3, r3
 8000e5a:	613b      	str	r3, [r7, #16]
  return result;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	fab3 f383 	clz	r3, r3
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	210f      	movs	r1, #15
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	fa93 f3a3 	rbit	r3, r3
 8000e7a:	61bb      	str	r3, [r7, #24]
  return result;
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fab3 f383 	clz	r3, r3
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8c:	431a      	orrs	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	621a      	str	r2, [r3, #32]
}
 8000e92:	bf00      	nop
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_GPIO_SetAFPin_8_15>:
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b089      	sub	sp, #36	; 0x24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa93 f3a3 	rbit	r3, r3
 8000eba:	613b      	str	r3, [r7, #16]
  return result;
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	fab3 f383 	clz	r3, r3
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa93 f3a3 	rbit	r3, r3
 8000edc:	61bb      	str	r3, [r7, #24]
  return result;
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	fab3 f383 	clz	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	6879      	ldr	r1, [r7, #4]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ef4:	bf00      	nop
 8000ef6:	3724      	adds	r7, #36	; 0x24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	613b      	str	r3, [r7, #16]
  return result;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000f2a:	e050      	b.n	8000fce <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d042      	beq.n	8000fc8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d003      	beq.n	8000f52 <LL_GPIO_Init+0x52>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d10d      	bne.n	8000f6e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	461a      	mov	r2, r3
 8000f58:	69b9      	ldr	r1, [r7, #24]
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff12 	bl	8000d84 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	461a      	mov	r2, r3
 8000f66:	69b9      	ldr	r1, [r7, #24]
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff fef3 	bl	8000d54 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	461a      	mov	r2, r3
 8000f74:	69b9      	ldr	r1, [r7, #24]
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff33 	bl	8000de2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d11a      	bne.n	8000fba <LL_GPIO_Init+0xba>
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	60bb      	str	r3, [r7, #8]
  return result;
 8000f90:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000f92:	fab3 f383 	clz	r3, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b07      	cmp	r3, #7
 8000f9a:	d807      	bhi.n	8000fac <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff4b 	bl	8000e40 <LL_GPIO_SetAFPin_0_7>
 8000faa:	e006      	b.n	8000fba <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	69b9      	ldr	r1, [r7, #24]
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff72 	bl	8000e9e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	69b9      	ldr	r1, [r7, #24]
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff fe97 	bl	8000cf6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1a7      	bne.n	8000f2c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <LL_SPI_IsEnabled>:
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff6:	2b40      	cmp	r3, #64	; 0x40
 8000ff8:	d101      	bne.n	8000ffe <LL_SPI_IsEnabled+0x18>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <LL_SPI_IsEnabled+0x1a>
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <LL_SPI_SetCRCPolynomial>:
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b29b      	uxth	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	611a      	str	r2, [r3, #16]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffd3 	bl	8000fe6 <LL_SPI_IsEnabled>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d139      	bne.n	80010ba <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800104e:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	6852      	ldr	r2, [r2, #4]
 800105a:	4311      	orrs	r1, r2
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	6892      	ldr	r2, [r2, #8]
 8001060:	4311      	orrs	r1, r2
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	68d2      	ldr	r2, [r2, #12]
 8001066:	4311      	orrs	r1, r2
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	6912      	ldr	r2, [r2, #16]
 800106c:	4311      	orrs	r1, r2
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6952      	ldr	r2, [r2, #20]
 8001072:	4311      	orrs	r1, r2
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	6992      	ldr	r2, [r2, #24]
 8001078:	4311      	orrs	r1, r2
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	69d2      	ldr	r2, [r2, #28]
 800107e:	4311      	orrs	r1, r2
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	6a12      	ldr	r2, [r2, #32]
 8001084:	430a      	orrs	r2, r1
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 0204 	bic.w	r2, r3, #4
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010a8:	d105      	bne.n	80010b6 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffab 	bl	800100c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80010b6:	2300      	movs	r3, #0
 80010b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	61da      	str	r2, [r3, #28]
  return status;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_TIM_SetPrescaler>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_TIM_SetAutoReload>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <LL_TIM_SetRepetitionCounter>:
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_TIM_GenerateEvent_UPDATE>:
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f043 0201 	orr.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	615a      	str	r2, [r3, #20]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <LL_TIM_Init+0x108>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d013      	beq.n	8001184 <LL_TIM_Init+0x40>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001162:	d00f      	beq.n	8001184 <LL_TIM_Init+0x40>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <LL_TIM_Init+0x10c>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d00b      	beq.n	8001184 <LL_TIM_Init+0x40>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <LL_TIM_Init+0x110>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d007      	beq.n	8001184 <LL_TIM_Init+0x40>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a38      	ldr	r2, [pc, #224]	; (8001258 <LL_TIM_Init+0x114>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d003      	beq.n	8001184 <LL_TIM_Init+0x40>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a37      	ldr	r2, [pc, #220]	; (800125c <LL_TIM_Init+0x118>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <LL_TIM_Init+0x108>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d02b      	beq.n	80011f2 <LL_TIM_Init+0xae>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011a0:	d027      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a2a      	ldr	r2, [pc, #168]	; (8001250 <LL_TIM_Init+0x10c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d023      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <LL_TIM_Init+0x110>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d01f      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <LL_TIM_Init+0x114>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d01b      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <LL_TIM_Init+0x118>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d017      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <LL_TIM_Init+0x11c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a25      	ldr	r2, [pc, #148]	; (8001264 <LL_TIM_Init+0x120>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00f      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <LL_TIM_Init+0x124>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00b      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <LL_TIM_Init+0x128>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a22      	ldr	r2, [pc, #136]	; (8001270 <LL_TIM_Init+0x12c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d003      	beq.n	80011f2 <LL_TIM_Init+0xae>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a21      	ldr	r2, [pc, #132]	; (8001274 <LL_TIM_Init+0x130>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d106      	bne.n	8001200 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4619      	mov	r1, r3
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff6d 	bl	80010ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff59 	bl	80010d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LL_TIM_Init+0x108>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d003      	beq.n	800122e <LL_TIM_Init+0xea>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a0c      	ldr	r2, [pc, #48]	; (800125c <LL_TIM_Init+0x118>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d105      	bne.n	800123a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	4619      	mov	r1, r3
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff67 	bl	8001108 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff72 	bl	8001124 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40010000 	.word	0x40010000
 8001250:	40000400 	.word	0x40000400
 8001254:	40000800 	.word	0x40000800
 8001258:	40000c00 	.word	0x40000c00
 800125c:	40010400 	.word	0x40010400
 8001260:	40014000 	.word	0x40014000
 8001264:	40014400 	.word	0x40014400
 8001268:	40014800 	.word	0x40014800
 800126c:	40001800 	.word	0x40001800
 8001270:	40001c00 	.word	0x40001c00
 8001274:	40002000 	.word	0x40002000

08001278 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <LL_InitTick+0x30>)
 800128c:	3b01      	subs	r3, #1
 800128e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <LL_InitTick+0x30>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <LL_InitTick+0x30>)
 8001298:	2205      	movs	r2, #5
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e010 	.word	0xe000e010

080012ac <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80012b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffdd 	bl	8001278 <LL_InitTick>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <LL_SetSystemCoreClock+0x1c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000

080012e8 <__libc_init_array>:
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	4d0d      	ldr	r5, [pc, #52]	; (8001320 <__libc_init_array+0x38>)
 80012ec:	4c0d      	ldr	r4, [pc, #52]	; (8001324 <__libc_init_array+0x3c>)
 80012ee:	1b64      	subs	r4, r4, r5
 80012f0:	10a4      	asrs	r4, r4, #2
 80012f2:	2600      	movs	r6, #0
 80012f4:	42a6      	cmp	r6, r4
 80012f6:	d109      	bne.n	800130c <__libc_init_array+0x24>
 80012f8:	4d0b      	ldr	r5, [pc, #44]	; (8001328 <__libc_init_array+0x40>)
 80012fa:	4c0c      	ldr	r4, [pc, #48]	; (800132c <__libc_init_array+0x44>)
 80012fc:	f000 f820 	bl	8001340 <_init>
 8001300:	1b64      	subs	r4, r4, r5
 8001302:	10a4      	asrs	r4, r4, #2
 8001304:	2600      	movs	r6, #0
 8001306:	42a6      	cmp	r6, r4
 8001308:	d105      	bne.n	8001316 <__libc_init_array+0x2e>
 800130a:	bd70      	pop	{r4, r5, r6, pc}
 800130c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001310:	4798      	blx	r3
 8001312:	3601      	adds	r6, #1
 8001314:	e7ee      	b.n	80012f4 <__libc_init_array+0xc>
 8001316:	f855 3b04 	ldr.w	r3, [r5], #4
 800131a:	4798      	blx	r3
 800131c:	3601      	adds	r6, #1
 800131e:	e7f2      	b.n	8001306 <__libc_init_array+0x1e>
 8001320:	08001358 	.word	0x08001358
 8001324:	08001358 	.word	0x08001358
 8001328:	08001358 	.word	0x08001358
 800132c:	0800135c 	.word	0x0800135c

08001330 <memset>:
 8001330:	4402      	add	r2, r0
 8001332:	4603      	mov	r3, r0
 8001334:	4293      	cmp	r3, r2
 8001336:	d100      	bne.n	800133a <memset+0xa>
 8001338:	4770      	bx	lr
 800133a:	f803 1b01 	strb.w	r1, [r3], #1
 800133e:	e7f9      	b.n	8001334 <memset+0x4>

08001340 <_init>:
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	bf00      	nop
 8001344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001346:	bc08      	pop	{r3}
 8001348:	469e      	mov	lr, r3
 800134a:	4770      	bx	lr

0800134c <_fini>:
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	bf00      	nop
 8001350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001352:	bc08      	pop	{r3}
 8001354:	469e      	mov	lr, r3
 8001356:	4770      	bx	lr
